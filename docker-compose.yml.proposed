services:
  db:
    image: pgvector/pgvector:pg17
    container_name: catalog-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-catalog}
      POSTGRES_USER: ${POSTGRES_USER:-catalog_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-catalog_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-catalog_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: ${ENVIRONMENT:-prod}
    container_name: catalog-app
    environment:
      # Database configuration
      POSTGRES_DB: ${POSTGRES_DB:-catalog}
      POSTGRES_USER: ${POSTGRES_USER:-catalog_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-catalog_password}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432

      # API configuration
      X_API_KEY: ${X_API_KEY}

      # LLM configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}

      # Environment indicator
      ENVIRONMENT: ${ENVIRONMENT:-prod}
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      # Mount code in dev mode for hot reload
      - ${CODE_MOUNT:-./src}:/app/src:${MOUNT_MODE:-ro}
      - ./data:/app/data
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    command: sh -c "PYTHONPATH=/app/src python /app/src/cli.py run-api"

volumes:
  postgres_data:
